import feedparser
import requests
import random
import schedule
import time
from bs4 import BeautifulSoup
from googletrans import Translator

# üîπ RSS-–ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –æ –î—É–±–∞–µ
RSS_FEEDS = [
    "https://gulfnews.com/rss",
    "https://www.khaleejtimes.com/rss"
]

# üîπ URL RussianEmirates (–ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é)
RUSSIAN_EMIRATES_URL = "https://russianemirates.com/news/"

# üîπ API VK
VK_API_TOKEN = "vk1.a.GpXji44Pfs8CvNddLvUvBTFegnCSf9q5_uzhryyLzEV_3dJ9WoJmC58mfp0oN1x7y7yWluIJvrhK0iFIGnMw44P1ac16ofEup3solM3mCVG0Td5GiRxB3NbTzLyvjLqAbvHqlDQqkXXn6ODvm58n9cW3XLNYhQ92lv2ENzlMIr_TOgJzeroL53IbxRQ_47MqYb8ctTIcKx36zN36BuMUmA"
GROUP_ID = "228816972"
VK_API_URL = "https://api.vk.com/method/wall.post"
VK_API_VERSION = "5.131"

# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# üîπ –•–µ—à—Ç–µ–≥–∏
GENERAL_HASHTAGS = ["#–î—É–±–∞–π", "#–û–ê–≠", "#–Ω–æ–≤–æ—Å—Ç–∏", "#–∂–∏–∑–Ω—å–≤–¥—É–±–∞–µ"]

def extract_image(entry):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ—Å—Ç–∏ RSS"""
    if "media_content" in entry:
        return entry.media_content[0]['url']
    return None

def parse_russian_emirates():
    """–ü–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å RussianEmirates.com"""
    news_list = []
    response = requests.get(RUSSIAN_EMIRATES_URL)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")
        articles = soup.find_all("div", class_="item")[:5]

        for article in articles:
            title = article.find("div", class_="title").text.strip()
            link = "https://russianemirates.com" + article.find("a")["href"]
            image = article.find("img")["src"] if article.find("img") else None

            title_ru = title  # RussianEmirates —É–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º

            news_list.append({
                "title": title_ru,
                "summary": "",
                "link": link,
                "image": image,
                "hashtags": " ".join(GENERAL_HASHTAGS)
            })

    return news_list

def get_latest_news():
    """–ü–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç –∏ RussianEmirates"""
    news_list = []

    # üîπ RSS-–Ω–æ–≤–æ—Å—Ç–∏
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        for entry in feed.entries[:5]:
            title = entry.title
            summary = entry.summary
            link = entry.link
            image_url = extract_image(entry)

            try:
                title_ru = translator.translate(title, dest='ru').text
                summary_ru = translator.translate(summary, dest='ru').text
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞

            # üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_list.append({
                "title": title_ru,
                "summary": summary_ru,
                "link": link,
                "image": image_url,
                "hashtags": " ".join(GENERAL_HASHTAGS)
            })

    # üîπ –ù–æ–≤–æ—Å—Ç–∏ —Å RussianEmirates
    news_list.extend(parse_russian_emirates())

    return news_list

def post_news_to_vk(news):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –≤ VK"""
    message = f"üì¢ {news['title']}\n\n{news['summary']}\nüîó {news['link']}\n\n{news['hashtags']}"

    params = {
        "access_token": VK_API_TOKEN,
        "owner_id": f"-{GROUP_ID}",
        "message": message,
        "v": VK_API_VERSION
    }

    if news["image"]:
        # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ VK —Å–µ—Ä–≤–µ—Ä
        upload_server = requests.get("https://api.vk.com/method/photos.getWallUploadServer",
                                     params={"access_token": VK_API_TOKEN, "group_id": GROUP_ID, "v": VK_API_VERSION}).json()

        if "response" in upload_server:
            image_url = news["image"]
            upload_url = upload_server["response"]["upload_url"]
            image_data = requests.get(image_url).content
            files = {"photo": ("image.jpg", image_data, "image/jpeg")}

            upload_response = requests.post(upload_url, files=files).json()

            if "photo" in upload_response:
                save_photo = requests.post("https://api.vk.com/method/photos.saveWallPhoto", params={
                    "access_token": VK_API_TOKEN,
                    "group_id": GROUP_ID,
                    "photo": upload_response["photo"],
                    "server": upload_response["server"],
                    "hash": upload_response["hash"],
                    "v": VK_API_VERSION
                }).json()

                if "response" in save_photo:
                    photo_id = save_photo["response"][0]["id"]
                    owner_id = save_photo["response"][0]["owner_id"]
                    params["attachments"] = f"photo{owner_id}_{photo_id}"

    response = requests.post(VK_API_URL, params=params).json()

    if "response" in response:
        print("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ VK!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response}")

def job():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"""
    print("üîπ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    latest_news = get_latest_news()

    if not latest_news:
        print("‚ùå –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return

    selected_news = random.sample(latest_news, min(3, len(latest_news)))  # –ü—É–±–ª–∏–∫—É–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏

    for news in selected_news:
        print(f"üì∞ –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ—Å—Ç—å: {news['title']}")
        post_news_to_vk(news)
        time.sleep(10)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏

# üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
schedule.every(3).hours.do(job)

if __name__ == "__main__":
    print("üì∞ –ë–æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞...")
    job()  # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    while True:
        schedule.run_pending()
        time.sleep(60)
